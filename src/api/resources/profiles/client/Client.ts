/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Airtop from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Profiles {
    export interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Profiles {
    constructor(protected readonly _options: Profiles.Options) {}

    /**
     * Delete profiles matching by id
     *
     * @param {Airtop.ProfilesDeleteRequest} request
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.profiles.delete()
     */
    public async delete(
        request: Airtop.ProfilesDeleteRequest = {},
        requestOptions?: Profiles.RequestOptions,
    ): Promise<void> {
        const { profileIds, profileNames } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (profileIds != null) {
            if (Array.isArray(profileIds)) {
                _queryParams["profileIds"] = profileIds.map((item) => item);
            } else {
                _queryParams["profileIds"] = profileIds;
            }
        }

        if (profileNames != null) {
            if (Array.isArray(profileNames)) {
                _queryParams["profileNames"] = profileNames.map((item) => item);
            } else {
                _queryParams["profileNames"] = profileNames;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                "v1/profiles",
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.39-beta0",
                "User-Agent": "@airtop/sdk/0.1.39-beta0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError("Timeout exceeded when calling DELETE /v1/profiles.");
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
