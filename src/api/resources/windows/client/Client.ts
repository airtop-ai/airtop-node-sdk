/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Airtop from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Windows {
    export interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Windows {
    constructor(protected readonly _options: Windows.Options) {}

    /**
     * Create an automation of a browser window asynchronously
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.AsyncCreateAutomationRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.asyncCreateAutomation("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async asyncCreateAutomation(
        sessionId: string,
        windowId: string,
        request: Airtop.AsyncCreateAutomationRequest = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AsyncSessionAiResponseEnvelope> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `async/sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/create-automation`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.AsyncCreateAutomationRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AsyncSessionAiResponseEnvelope.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /async/sessions/{sessionId}/windows/{windowId}/create-automation.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a form filler automation asynchronously
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.AsyncCreateFormFillerRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.asyncCreateFormFiller("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async asyncCreateFormFiller(
        sessionId: string,
        windowId: string,
        request: Airtop.AsyncCreateFormFillerRequest = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AsyncSessionAiResponseEnvelope> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `async/sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/create-form-filler`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.AsyncCreateFormFillerRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AsyncSessionAiResponseEnvelope.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /async/sessions/{sessionId}/windows/{windowId}/create-form-filler.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Execute an automation of a browser window asynchronously
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.AsyncExecuteAutomationRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.asyncExecuteAutomation("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         automationId: "automationId"
     *     })
     */
    public async asyncExecuteAutomation(
        sessionId: string,
        windowId: string,
        request: Airtop.AsyncExecuteAutomationRequest,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AsyncSessionAiResponseEnvelope> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `async/sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/execute-automation`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.AsyncExecuteAutomationRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AsyncSessionAiResponseEnvelope.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /async/sessions/{sessionId}/windows/{windowId}/execute-automation.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Fill a form of a browser window asynchronously using a form-filler automation
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.AsyncFillFormRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.asyncFillForm("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         automationId: "automationId"
     *     })
     */
    public async asyncFillForm(
        sessionId: string,
        windowId: string,
        request: Airtop.AsyncFillFormRequest,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AsyncSessionAiResponseEnvelope> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `async/sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/fill-form`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.AsyncFillFormRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AsyncSessionAiResponseEnvelope.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /async/sessions/{sessionId}/windows/{windowId}/fill-form.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a new browser window in a session. Optionally, you can specify a url to load on the window upon creation.
     *
     * @param {string} sessionId - ID of the session that owns the window.
     * @param {Airtop.CreateWindowInputV1Body} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.create("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b")
     */
    public async create(
        sessionId: string,
        request: Airtop.CreateWindowInputV1Body = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.WindowIdResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateWindowInputV1Body.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WindowIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get information about a browser window in a session, including the live view url.
     *
     * @param {string} sessionId - ID of the session that owns the window.
     * @param {string} windowId - ID of the browser window, which can either be a normal AirTop windowId or a [CDP TargetId](https://chromedevtools.github.io/devtools-protocol/tot/Target/#type-TargetID) from a browser automation library like Puppeteer (typically associated with the page or main frame). Our SDKs will handle retrieving a TargetId for you from various popular browser automation libraries, but we also have details in our guides on how to do it manually.
     * @param {Airtop.GetWindowInfoRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.getWindowInfo("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "7334da2a-91b0-42c5-6156-76a5eba87430", {
     *         screenResolution: "1280x720"
     *     })
     */
    public async getWindowInfo(
        sessionId: string,
        windowId: string,
        request: Airtop.GetWindowInfoRequest = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.WindowResponse> {
        const { includeNavigationBar, disableResize, screenResolution } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (includeNavigationBar != null) {
            _queryParams["includeNavigationBar"] = includeNavigationBar.toString();
        }

        if (disableResize != null) {
            _queryParams["disableResize"] = disableResize.toString();
        }

        if (screenResolution != null) {
            _queryParams["screenResolution"] = screenResolution;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WindowResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling GET /sessions/{sessionId}/windows/{windowId}.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Loads a specified url on a given window
     *
     * @param {string} sessionId - ID of the session that owns the window.
     * @param {string} windowId - Airtop window ID of the browser window.
     * @param {Airtop.WindowLoadUrlV1Body} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.loadUrl("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "7334da2a-91b0-42c5-6156-76a5eba87430", {
     *         url: "https://www.airtop.ai"
     *     })
     */
    public async loadUrl(
        sessionId: string,
        windowId: string,
        request: Airtop.WindowLoadUrlV1Body,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.OperationOutcomeResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WindowLoadUrlV1Body.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.OperationOutcomeResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Closes a browser window in a session
     *
     * @param {string} sessionId - ID of the session that owns the window.
     * @param {string} windowId - Airtop window ID of the browser window.
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.close("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "7334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async close(
        sessionId: string,
        windowId: string,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.WindowIdResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WindowIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling DELETE /sessions/{sessionId}/windows/{windowId}.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Execute a click interaction in a specific browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionClickHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.click("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         elementDescription: "The login button"
     *     })
     */
    public async click(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionClickHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/click`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionClickHandlerRequestBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/click.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a form-filler automation synchronously for the form loaded in the browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.CreateFormFillerRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.createFormFiller("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async createFormFiller(
        sessionId: string,
        windowId: string,
        request: Airtop.CreateFormFillerRequest = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/create-form-filler`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateFormFillerRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/create-form-filler.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Fill a form of a browser window synchronously using a form-filler automation
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.FillFormRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.fillForm("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         automationId: "automationId"
     *     })
     */
    public async fillForm(
        sessionId: string,
        windowId: string,
        request: Airtop.FillFormRequest,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/fill-form`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.FillFormRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/fill-form.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Execute a hover interaction in a specific browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionHoverHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.hover("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         elementDescription: "The search box input in the top right corner"
     *     })
     */
    public async hover(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionHoverHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/hover`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionHoverHandlerRequestBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/hover.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionMonitorHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.monitor("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         condition: "Determine if the user appears to be signed in to the website"
     *     })
     */
    public async monitor(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionMonitorHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/monitor`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionMonitorHandlerRequestBody.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/monitor.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Submit a prompt that queries the content of a specific browser window. You may extract content from the page, or ask a question about the page and allow the AI to answer it (ex. Is the user logged in?).
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionPageQueryHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.pageQuery("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         prompt: "What is the main idea of this page?"
     *     })
     */
    public async pageQuery(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionPageQueryHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/page-query`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionPageQueryHandlerRequestBody.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/page-query.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Submit a prompt that queries the content of a specific browser window and paginates through pages to return a list of results.
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionPaginatedExtractionHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.paginatedExtraction("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         prompt: "This site contains a list of results about <provide details about the list>. Navigate through 3 pages of results and return the title and <provide details about the data you want to extract> about each result in this list."
     *     })
     */
    public async paginatedExtraction(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionPaginatedExtractionHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/paginated-extraction`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionPaginatedExtractionHandlerRequestBody.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/paginated-extraction.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint is deprecated. Please use the `pageQuery` endpoint instead.
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionPageQueryHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.promptContent("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         prompt: "What is the main idea of this page?"
     *     })
     */
    public async promptContent(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionPageQueryHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/prompt-content`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionPageQueryHandlerRequestBody.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/prompt-content.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Scrape a window and return the content as markdown
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window to scrape.
     * @param {Airtop.ScrapeContentRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.scrapeContent("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async scrapeContent(
        sessionId: string,
        windowId: string,
        request: Airtop.ScrapeContentRequest = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.ScrapeResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/scrape-content`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ScrapeContentRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ScrapeResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/scrape-content.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Take a screenshot of a browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionScreenshotHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.screenshot("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async screenshot(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionScreenshotHandlerRequestBody = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/screenshot`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionScreenshotHandlerRequestBody.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/screenshot.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Execute a scroll interaction in a specific browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionScrollHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.scroll("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async scroll(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionScrollHandlerRequestBody = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/scroll`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionScrollHandlerRequestBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/scroll.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint is deprecated. Please use the `pageQuery` endpoint and ask for a summary in the prompt instead.
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window to summarize.
     * @param {Airtop.SessionSummaryHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.summarizeContent("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    public async summarizeContent(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionSummaryHandlerRequestBody = {},
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/summarize-content`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionSummaryHandlerRequestBody.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/summarize-content.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Execute a type interaction in a specific browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionTypeHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.type("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         text: "Example text"
     *     })
     */
    public async type(
        sessionId: string,
        windowId: string,
        request: Airtop.SessionTypeHandlerRequestBody,
        requestOptions?: Windows.RequestOptions,
    ): Promise<Airtop.AiPromptResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirtopEnvironment.Default,
                `sessions/${encodeURIComponent(sessionId)}/windows/${encodeURIComponent(windowId)}/type`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.35",
                "User-Agent": "@airtop/sdk/0.1.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SessionTypeHandlerRequestBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.AiPromptResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{sessionId}/windows/{windowId}/type.",
                );
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
