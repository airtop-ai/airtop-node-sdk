/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Airtop from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as serializers from "../../../../serialization/index";

export declare namespace ExtensionConfigurations {
    interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class ExtensionConfigurations {
    constructor(protected readonly _options: ExtensionConfigurations.Options) {}

    /**
     * Delete extension configurations matching by name
     *
     * @param {Airtop.ExtensionConfigurationDeleteRequest} request
     * @param {ExtensionConfigurations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.extensionConfigurations.extensionConfigurationDelete()
     */
    public async extensionConfigurationDelete(
        request: Airtop.ExtensionConfigurationDeleteRequest = {},
        requestOptions?: ExtensionConfigurations.RequestOptions
    ): Promise<void> {
        const { extensionConfigurationNames } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (extensionConfigurationNames != null) {
            if (Array.isArray(extensionConfigurationNames)) {
                _queryParams["extensionConfigurationNames"] = extensionConfigurationNames.map((item) => item);
            } else {
                _queryParams["extensionConfigurationNames"] = extensionConfigurationNames;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.AirtopEnvironment.Default,
                "extension-configuration"
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.22-beta0",
                "User-Agent": "@airtop/sdk/0.1.22-beta0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AirtopError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError();
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get an extension configuration by name
     *
     * @param {string} name - Name of the extension configuration to get
     * @param {ExtensionConfigurations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Airtop.NotFoundError}
     * @throws {@link Airtop.UnprocessableEntityError}
     * @throws {@link Airtop.InternalServerError}
     *
     * @example
     *     await client.extensionConfigurations.extensionConfigurationGetInfo("my-configuration")
     */
    public async extensionConfigurationGetInfo(
        name: string,
        requestOptions?: ExtensionConfigurations.RequestOptions
    ): Promise<Airtop.ExtensionConfigurationOutput> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.AirtopEnvironment.Default,
                `extension-configuration/${encodeURIComponent(name)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@airtop/sdk",
                "X-Fern-SDK-Version": "0.1.22-beta0",
                "User-Agent": "@airtop/sdk/0.1.22-beta0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ExtensionConfigurationOutput.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Airtop.NotFoundError(
                        serializers.ErrorModel.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new Airtop.UnprocessableEntityError(
                        serializers.ErrorModel.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Airtop.InternalServerError(
                        serializers.ErrorModel.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.AirtopError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirtopError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AirtopTimeoutError();
            case "unknown":
                throw new errors.AirtopError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
