/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Airtop from "../../../../api/index";
import * as core from "../../../../core";
import { SessionsEventsResponseError } from "./SessionsEventsResponseError";
import { SessionsEventsResponseWindowEvent } from "./SessionsEventsResponseWindowEvent";
import { SessionsEventsResponseSessionEvent } from "./SessionsEventsResponseSessionEvent";
import { SessionsEventsResponseStatus } from "./SessionsEventsResponseStatus";

export const SessionsEventsResponse: core.serialization.Schema<
    serializers.SessionsEventsResponse.Raw,
    Airtop.SessionsEventsResponse
> = core.serialization
    .union("event", {
        error: SessionsEventsResponseError,
        windowEvent: SessionsEventsResponseWindowEvent,
        sessionEvent: SessionsEventsResponseSessionEvent,
        status: SessionsEventsResponseStatus,
    })
    .transform<Airtop.SessionsEventsResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SessionsEventsResponse {
    export type Raw =
        | SessionsEventsResponse.Error
        | SessionsEventsResponse.WindowEvent
        | SessionsEventsResponse.SessionEvent
        | SessionsEventsResponse.Status;

    export interface Error extends SessionsEventsResponseError.Raw {
        event: "error";
    }

    export interface WindowEvent extends SessionsEventsResponseWindowEvent.Raw {
        event: "windowEvent";
    }

    export interface SessionEvent extends SessionsEventsResponseSessionEvent.Raw {
        event: "sessionEvent";
    }

    export interface Status extends SessionsEventsResponseStatus.Raw {
        event: "status";
    }
}
